# Generated by CodiumAI
import os
import sys
from unittest import mock

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import unittest

from lib.utils import stream_output


class TestStreamOutput(unittest.TestCase):

    # Outputs the process stdout to sys.stdout.buffer.
    @mock.patch("subprocess.Popen")
    @mock.patch("sys.stdout.buffer.write")
    def test_outputs_stdout(self, mock_write, mock_popen):
        process = mock_popen.return_value
        process.stdout.read.side_effect = [b"output1", b"output2", b""]

        stream_output(process)

        mock_write.assert_has_calls([mock.call(b"output1"), mock.call(b"output2")])

    # Handles the process stdout stream correctly.
    @mock.patch("subprocess.Popen")
    @mock.patch("sys.stdout.buffer.write")
    def test_handles_stdout_stream(self, mock_write, mock_popen):
        process = mock_popen.return_value
        process.stdout.read.side_effect = [b"output1", b"output2", b""]

        stream_output(process)

        mock_write.assert_has_calls([mock.call(b"output1"), mock.call(b"output2")])


if __name__ == "__main__":
    unittest.main()
