---
networks:
  proxynet:
    name: proxynet
    external: true

services:
{%- set p = project %}
{%- for s in project.services %}
  {#- The service needs discovery labels when one of its ingress entries has a domain and is not using hostport #}
  {#- (hostport services are handled by static routers) #}
  {%- set needs_discovery = list(s.ingress | selectattr('domain')) | length > list(s.ingress | selectattr('domain') | selectattr('hostport')) | length %}
  {%- set has_ingress = list(s.ingress | selectattr('domain')) | length > 0 or list(s.ingress | selectattr('hostport')) | length > 0 %}
  {{ project.name }}-{{ s.host }}:
  {%- if s.command %}
    command: {{ s.command }}
  {%- endif %}
  {%- if s.depends_on | length > 0 %}
    depends_on:
    {%- for dep in s.depends_on %}
      - {{ project.name }}-{{ dep }}
    {%- endfor %}
  {%- endif %}
  {%- if s.env.model_dump() | length > 0 %}
    environment:
    {%- for k, v in s.env %}
      - '{{ k }}={{ (v ~ '').replace("'", "''") }}'
    {%- endfor %}
  {%- endif %}
    expose:
  {%- for i in s.ingress %}
      - {{ i.port }}/{{ Protocol[i.protocol].value }}
  {%- endfor %}
    image: {{ s.image }}
  {%- if needs_discovery or (s.labels | length > 0) %}
    labels:
    {%- if needs_discovery %}
      - traefik.enable=true
      - traefik.docker.network=proxynet
      {%- for i in s.ingress %}
        {%- if i.domain %}
          {%- set name = project.name ~ '-' ~ s.host.replace('.', '-') ~ '-' ~ i.port %}
          {%- set router = Router(i.router).value %}
      - traefik.{{ router }}.routers.{{ name }}.entrypoints={% if i.hostport %}{{ Protocol(i.protocol).value }}-{{ i.hostport }}{% else %}web-secure{% endif %}
          {%- if i.router != Router.udp %}
      - traefik.{{ router }}.routers.{{ name }}.rule=Host{% if i.router == Router.tcp %}SNI{% endif %}(`{{ i.domain }}`){%- if i.path_prefix %} && PathPrefix(`{{ i.path_prefix }}`){%- endif %}
      - traefik.{{ router }}.routers.{{ name }}.rulesyntax=v2
            {%- if i.router == Router.tcp %}
      - traefik.tcp.routers.{{ name }}.tls.certresolver=letsencrypt
            {%- endif %}
          {%- endif %}
      - traefik.{{ router }}.routers.{{ name }}.service={{ name }}
          {%- if i.path_prefix and i.path_remove %}
      - traefik.{{ router }}.middlewares.removeServiceSelector.stripPrefix.prefixes={{ i.path_prefix }}
          {%- endif %}
      - traefik.{{ router }}.services.{{ name }}.loadbalancer.server.port={{ i.port }}
        {%- endif %}
      {%- endfor %}
    {%- endif %}
    {%- for l in s.labels %}
      - {{ l }}
    {%- endfor %}    
  {%- endif %}
    networks:
  {%- if p.services | length > 1 %}
      - default
  {%- endif %}
  {%- if has_ingress %}
      - proxynet
  {%- endif %}
    restart: {{ s.restart }}
  {%- if s.volumes %}
    volumes:
    {%- for v in s.volumes %}
      {%- if ':' in v %}
        {%- set source = v.split(':')[0] %}
        {%- set target = v.split(':')[1] %}
      {%- else %}
        {%- set source = v %}
        {%- set target = v %}
      {%- endif %}
      - '.{{ source }}:{{ target }}'
    {%- endfor %}
  {%- endif %}
  {%- for k, v in s.additional_properties.items() %}
    {{ k }}: {{ v }}
  {%- endfor %}
{%- endfor %}
